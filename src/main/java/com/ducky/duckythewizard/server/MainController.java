package com.ducky.duckythewizard.server;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

@Controller
@RequestMapping(path="")
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private HighScoreRepository highScoreRepository;

    @Autowired
    private UserRepository userRepository;

    @PostMapping(path="/addScore") // Map ONLY POST Requests
    public @ResponseBody String addNewHighScore(@RequestParam String name
            , @RequestParam Integer score) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        HighScore n = new HighScore();
        User user = userRepository.getUserByName(name);
        n.setUser(user);
        n.setScore(score);
        highScoreRepository.save(n);
        return "Saved";
    }

    @PostMapping(path="/addUser") // Map ONLY POST Requests
    public @ResponseBody String addNewUser(@RequestBody String name) {
        System.out.println("===> reqestBody name: " + name);
        if(userRepository.existsUserByName(name)){
            return "ERROR: User " + name + " already exists";
        }
        User user = new User();
        user.setName(name);
        userRepository.save(user);
        return "Saved";
    }

    @GetMapping(path="/getUser")
    public @ResponseBody boolean getUser(@RequestParam String name) {
        return userRepository.existsUserByName(name);
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<HighScore> getAllHighScores() {
        // This returns a JSON or XML with the users
        return highScoreRepository.findAll();
    }

    @GetMapping(path="/top")
    public @ResponseBody Iterable<HighScore> getTopHighScores(@RequestParam int limit) {
        return highScoreRepository.findAllByOrderByScoreDesc(PageRequest.of(0, limit));
    }
}